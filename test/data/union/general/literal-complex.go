package generalunion

import "encoding/json"

// This file is generated by the typespec compiler. Do not edit.

type LocaleDefinition struct {
	Language string
	Culture  string
}

func (m *LocaleDefinition) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	if v, ok := rawMsg["language"]; ok {
		if err := json.Unmarshal(v, &m.Language); err != nil {
			return err
		}
	}
	if v, ok := rawMsg["culture"]; ok {
		if err := json.Unmarshal(v, &m.Culture); err != nil {
			return err
		}
	}
	return nil
}

func (m LocaleDefinition) MarshalJSON() ([]byte, error) {
	obj := map[string]interface{}{
		"language": m.Language,
		"culture":  m.Culture,
	}

	return json.Marshal(obj)
}

type LocaleStringValues string

const (
	LocaleStringValuesEnUs LocaleStringValues = "en-US"
	LocaleStringValuesEnGb LocaleStringValues = "en-GB"
)

func (f *LocaleStringValues) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*f = LocaleStringValues(v)
	return nil
}

func (f LocaleStringValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(f)
}

type Locale interface {
	Type() string
}

type LocaleLocaleDefinition struct {
	Value LocaleDefinition
}

func (v LocaleLocaleDefinition) Type() string {
	return "LocaleDefinition"
}

type LocaleLocaleStringValues struct {
	Value LocaleStringValues
}

func (v LocaleLocaleStringValues) Type() string {
	return "LocaleStringValues"
}

func UnmarshalLocale(data []byte) (Locale, error) {
	var err error

	var localeDefinition LocaleDefinition
	if err = json.Unmarshal(data, &localeDefinition); err == nil {
		return LocaleLocaleDefinition{Value: localeDefinition}, nil
	}

	var localeStringValues LocaleStringValues
	if err = json.Unmarshal(data, &localeStringValues); err == nil {
		return LocaleLocaleStringValues{Value: localeStringValues}, nil
	}

	return nil, err
}
