package generalunion

import "encoding/json"

// This file is generated by the typespec compiler. Do not edit.

type CompoundName struct {
	Name       string
	SecondName string
}

func (m *CompoundName) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	if v, ok := rawMsg["name"]; ok {
		if err := json.Unmarshal(v, &m.Name); err != nil {
			return err
		}
	}
	if v, ok := rawMsg["secondName"]; ok {
		if err := json.Unmarshal(v, &m.SecondName); err != nil {
			return err
		}
	}
	return nil
}

func (m CompoundName) MarshalJSON() ([]byte, error) {
	obj := map[string]interface{}{
		"name":       m.Name,
		"secondName": m.SecondName,
	}

	return json.Marshal(obj)
}

type Name interface {
	Type() string
}

type NameString struct {
	Value string
}

func (v NameString) Type() string {
	return "string"
}

type NameCompoundName struct {
	Value CompoundName
}

func (v NameCompoundName) Type() string {
	return "CompoundName"
}

func UnmarshalName(data []byte) (Name, error) {
	var err error

	var string string
	if err = json.Unmarshal(data, &string); err == nil {
		return NameString{Value: string}, nil
	}

	var compoundName CompoundName
	if err = json.Unmarshal(data, &compoundName); err == nil {
		return NameCompoundName{Value: compoundName}, nil
	}

	return nil, err
}

type Person struct {
	Name Nullable[Name]
}

func (m *Person) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	if v, ok := rawMsg["name"]; ok {
		value, err := UnmarshalName(v)
		if err != nil {
			return err
		}
		m.Name = SetNullable(value)
	}
	return nil
}

func (m Person) MarshalJSON() ([]byte, error) {
	obj := map[string]interface{}{
		"name": m.Name,
	}

	return json.Marshal(obj)
}
