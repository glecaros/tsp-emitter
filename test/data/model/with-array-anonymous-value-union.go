package modeltest

import "encoding/json"

// This file is generated by the typespec compiler. Do not edit.
type UserInterface struct {
	Languages []UserInterfaceLanguages
}

func (m *UserInterface) UnmarshalJSON(data []byte) error {
	var rawMsg map[string]json.RawMessage
	if err := json.Unmarshal(data, &rawMsg); err != nil {
		return err
	}
	if v, ok := rawMsg["languages"]; ok {
		if err := json.Unmarshal(v, &m.Languages); err != nil {
			return err
		}
	}
	return nil
}

func (m UserInterface) MarshalJSON() ([]byte, error) {
	obj := map[string]interface{}{
		"languages": m.Languages,
	}

	return json.Marshal(obj)
}

type UserInterfaceLanguages string

const (
	UserInterfaceLanguagesEnglish UserInterfaceLanguages = "english"
	UserInterfaceLanguagesSpanish UserInterfaceLanguages = "spanish"
	UserInterfaceLanguagesFrench  UserInterfaceLanguages = "french"
)

func (f *UserInterfaceLanguages) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	*f = UserInterfaceLanguages(v)
	return nil
}

func (f UserInterfaceLanguages) MarshalJSON() ([]byte, error) {
	return json.Marshal(f)
}
