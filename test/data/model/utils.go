package modeltest

import (
	"encoding/json"
	"time"
)

// This file is generated by the typespec compiler. Do not edit.
type Nullable[T any] struct {
	value *T
	isSet bool
}

func SetNullable[T any](v T) Nullable[T] {
	return Nullable[T]{value: &v, isSet: true}
}

func UnsetNullable[T any]() Nullable[T] {
	return Nullable[T]{isSet: false}
}

func NullNullable[T any]() Nullable[T] {
	return Nullable[T]{isSet: true}
}

func (n Nullable[T]) IsSet() bool {
	return n.isSet
}

func (n Nullable[T]) Value() T {
	return *n.value
}

func (n *Nullable[T]) SetValue(v T) {
	n.value = &v
	n.isSet = true
}

func (o Nullable[T]) MarshalJSON() ([]byte, error) {
	if o.isSet && o.value == nil {
		return []byte("null"), nil
	}
	return json.Marshal(o.value)
}

func (o *Nullable[T]) UnmarshalJSON(data []byte) error {
	o.isSet = true
	return json.Unmarshal(data, &o.value)
}

func Ptr[T any](v T) *T {
	return &v
}

func serializeDurationInternal(v time.Duration) string {
	return v.String()
}

func unmarshalDurationInternal(data []byte, duration *time.Duration) error {
	var durationString string
	if err := json.Unmarshal(data, &durationString); err != nil {
		return err
	}

	var v time.Duration
	var err error
	if v, err = time.ParseDuration(durationString); err != nil {
		return err
	}
	*duration = v

	return nil
}
